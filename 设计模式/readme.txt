设计模式:
    概念核心是可复用+面向对象。
    使用核心是理解不变和变化，懂得什么时候，什么地点应用设计模式，比理解设计模式本身更为重要！
    理解任何一个设计模式都要清楚，代码中哪些是变化的，哪些是稳定的。

    底层思维: 语言构造 + 编译转换 + 内存模型 + 运行时机制。
        封装
        继承
        多态

    抽象思维: 面向对象 + 组件封装 + 设计模式 + 架构模式。
        应对变化
        分解(分而治之，理解出"异") + 抽象(抽象出"同")

面向对象设计原则:
    前言:
        1. 不应该将设计模式当作算法来学习，设计模式是根据设计原则来总结出的经验模版。因此更重要的应该是设计原则。设计模式不应该违背设计原则。
        2. 虚函数是设计模式的核心

    1. 依赖倒置原则(通过抽象来隔离变化)
        高层模块(稳定)不应该依赖底层模块(变化)，二者都应该依赖于抽象(稳定)
        抽象(稳定)不应该依赖于实现细节(变化)，实现细节应该依赖于抽象(稳定)

        高层模块(稳定) -> 抽象(稳定) -> 底层模块(变化)

    2. 开放封闭原则
        对扩展开放，对修改封闭。

    3. 单一职责原则
        一个类应该仅有一个引起其变化的原因。变化的方向隐含着类的责任。

    4. Liskov 替换原则 (李斯科夫)
        子类必须能够替换它们的基类。

    5. 接口隔离原则
        应该控制对外开放的接口

    6. 应该优先使用组合而不是类继承
        子类和父类的耦合度不高

    7. 封装变化层
        一侧变化一侧稳定

    8. 针对接口编程而不是针对实现编程
        接口标准化，接口标准化的核心在于分工协作
        松耦合设计


书籍：
    重构与模式
    重构-改善既有代码的设计


重构关键:
    静态绑定 -> 动态绑定
    早绑定 -> 晚绑定
    继承 -> 组合
    编译时依赖 -> 运行时依赖
    紧耦合 -> 松耦合
